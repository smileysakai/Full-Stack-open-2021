{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","personService","getPersons","axios","get","then","response","data","addPerson","contactObject","post","addedPerson","deletePerson","contactid","delete","updatePerson","put","Filter","props","value","filterName","onChange","handleFilter","PersonForm","onSubmit","addName","newName","handleNameChange","newNumber","handleNumberChange","type","Persons","personsToShowFix","personsToShow","map","person","name","number","onClick","handleDelete","id","App","useState","persons","setPersons","setNewName","setNewNumber","showAll","setShowAll","setFilterName","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","contacts","filter","toUpperCase","includes","Notification","message","className","event","target","preventDefault","nameObject","contactExist","window","confirm","updatedPerson","setTimeout","catch","error","addedPersonData","concat","contactname","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e54fc82.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getPersons = () => {\n  const personsRequest = axios.get(baseUrl)\n  const responseData = personsRequest.then( response => response.data)\n  return responseData\n}\n\n/*useEffect(() => {\n  const personsRequest = axios.get(baseUrl)\n  const responseData = personsRequest.then( response => response.data)\n  responseData.then ( numbers => setPersons(numbers))\n},[]) */\n\nconst addPerson = (contactObject) => {\n  const request = axios.post(baseUrl, contactObject)\n  const addedPerson = request.then( addedPerson => addedPerson.data)\n  return addedPerson\n}\n\n/*\n  //add persons\n  const addName = (event) => {    \n    event.preventDefault()\n    let nameexists = false\n    persons.forEach(function(person) {\n      if (newName === person.name){\n        window.alert(`${newName} is already added to phonebook`)\n        nameexists = true\n      } \n    })\n    if (!nameexists){\n      const nameObject = {\n        name: newName,\n        number: newNumber\n      }\n      const request = axios.post(baseUrl, nameObject)\n      const addedPerson = request.then( returnedPerson => \n        returnedPerson.data\n      )\n      addedPerson.then( addedPersonData => {\n        setPersons(persons.concat(addedPersonData))\n        setNewName('')\n        setNewNumber('')\n      })\n    }\n  }\n\n  */\n\nconst deletePerson = (contactid) => {\n  const request = axios.delete(`${baseUrl}/${contactid}`)\n  return request\n}\n\nconst updatePerson = (contactid, contactObject) => {\n  const personsRequest = axios.put(`${baseUrl}/${contactid}`, contactObject)\n  return personsRequest.then(response => response.data)\n}\n\nconst personService = {getPersons, addPerson, deletePerson, updatePerson}\n\nexport default personService","import React, { useState, useEffect } from 'react'\n//import axios from 'axios'\nimport personService from './services/persons'\n//const baseUrl = 'http://localhost:3001/persons'\n\n\nconst Filter = (props) => {\n  return(\n    <div>\n      filter shown with <input value={props.filterName} onChange={props.handleFilter} />\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return(\n    <form onSubmit={props.addName}>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNameChange} />\n      </div>\n      <div>\n        number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = (props) => {\n  const personsToShowFix = [...props.personsToShow]\n  return(\n    <div>\n      {personsToShowFix.map((person) => {\n        //console.log(person.id)\n        return(\n          <div key={person.id}> {person.name} {person.number} <button onClick={() => props.handleDelete([person.id, person.name])}>delete</button></div>\n        )\n      }\n      )}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n\n  const [ showAll, setShowAll ] = useState(true)  \n  const [ filterName, setFilterName] = useState('')\n\n  const [successMessage, setSuccessMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  useEffect(() => {\n    personService\n      .getPersons()\n      .then ( contacts => setPersons(contacts))\n  },[])\n\n  const personsToShow = showAll    \n  ? persons    \n  : persons.filter(person => person.name.toUpperCase().includes(filterName.toUpperCase()))\n\n  const addName = (event) => {    \n    event.preventDefault()\n    const nameObject = {\n      name: newName,\n      number: newNumber\n    }\n    const [contactExist] = persons.filter(person => person.name===newName)\n    //console.log(contactExist.id)\n    if (contactExist){\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)){\n        //functionality for editing contact\n        personService\n          .updatePerson(contactExist.id, nameObject)\n          .then( updatedPerson => {\n            setPersons(persons.map(person => person.id !== contactExist.id ? person : updatedPerson))\n            setSuccessMessage(`Updated ${newName}`)\n            setTimeout(() => {          \n              setSuccessMessage(null)        \n            }, 3000)\n          })\n          .catch(error => {\n            //console.log(`Information of ${newName} has already been removed from the server`)\n            setErrorMessage(`Information of ${newName} has already been removed from the server`)\n            setTimeout(() => {          \n              setErrorMessage(null)        \n            }, 3000)\n            setPersons(persons.filter(person => person.id !== contactExist.id))\n          })\n          setNewName('')\n          setNewNumber('')\n      }\n    } else {\n      //add new person\n      personService\n        .addPerson(nameObject)\n        .then( addedPersonData => {\n          setPersons(persons.concat(addedPersonData))\n          setSuccessMessage(`Added ${newName}`)\n            setTimeout(() => {          \n              setSuccessMessage(null)        \n            }, 3000)\n        setNewName('')\n        setNewNumber('')\n        })\n        .catch( error => {\n          //console.log(error.response.data)\n          setErrorMessage(error.response.data.error)\n          setTimeout(() => {          \n            setErrorMessage(null)        \n          }, 3000)\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    //console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    //console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setShowAll(false)\n    setFilterName(event.target.value)\n    if (event.target.value===''){\n      setShowAll(true)\n    }\n  }\n\n  const deletePerson = ([contactid, contactname]) => {\n    if (window.confirm(`Delete ${contactname} ?`)){\n      personService\n        .deletePerson(contactid)\n      setPersons(persons.filter(person=> person.id !==contactid))\n    }\n  }\n\n  const Notification = ({ message, type }) => {\n    if (message === null) {\n      return null\n    }\n    if (type === 'success'){\n      return (\n        <div className=\"success\">\n          {message}\n        </div>\n      )\n    } else {\n      return  (\n        <div className=\"error\">\n          {message}\n        </div>\n      )\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Notification message={successMessage} type='success'/>\n        <Notification message={errorMessage} type='error'/>\n        <Filter filterName={filterName} handleFilter={handleFilterChange}/>\n      <h2>add a new</h2>\n        <PersonForm addName={addName} newName={newName} handleNameChange={handleNameChange} newNumber ={newNumber} handleNumberChange={handleNumberChange}/>\n      <h2>Numbers</h2>\n        <Persons personsToShow = {personsToShow} handleDelete = {deletePerson}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}